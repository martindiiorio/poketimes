{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","react_default","a","createElement","className","Link","to","NavLink","Home","posts","this","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","connect","state","Rainbow","WrappedComponent","Math","floor","random","Contact","Post","handleClick","_this","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","BrowserRouter","components_Navbar","Switch","Route","exact","path","component","About","Boolean","window","location","hostname","initState","rootReducer","arguments","undefined","action","newPosts","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.077ca57b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\n\nconst Navbar = (props) => {\n  return (\n    <nav className=\"nav-wrapper red darjen-3\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"brand-logo\">Poke'Times</Link>\n        <ul className=\"right\">\n          <li><Link to=\"/\">Home</Link></li>\n          <li><NavLink to=\"/about\">About</NavLink></li>\n          <li><NavLink to=\"/contact\">Contact</NavLink></li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default withRouter(Navbar);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pokeball from '../pokeball.png';\nimport { connect } from 'react-redux';\n\nclass Home extends Component {\n  render() {\n    const { posts } = this.props;\n    const postList = posts.length ? (\n      posts.map(post => {\n        return (\n          <div className=\"post card\" key={post.id}>\n            <img src={Pokeball} alt=\"A pokeball\"/>\n            <div className=\"card-content\">\n              <Link to={'/' + post.id}>\n                <span className=\"card-title red-text\">{post.title}</span>\n              </Link>\n              <p>{post.body}</p>\n            </div>\n          </div>\n        )\n      })\n    ) : (\n      <div className=\"center\">No posts yet</div>\n    );\n    return (\n      <div className=\"container home\">\n        <h4 className=\"center\">Home</h4>\n        {postList}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.posts\n  }\n}\n\nexport default connect(mapStateToProps)(Home);\n","import React from 'react';\nimport Rainbow from '../hoc/Rainbow';\n\nconst About = () => {\n  return (\n    <div className=\"container\">\n      <h4 className=\"center\">About</h4>\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Perferendis eos delectus reiciendis temporibus aut, molestiae dignissimos veritatis ex qui dolore nobis nihil ea incidunt quidem, iure tempore veniam deleniti nesciunt.</p>\n    </div>\n  )\n}\n\nexport default Rainbow(About);\n","import React from 'react';\n\nconst Rainbow = (WrappedComponent) => {\n\n  const colours = ['red', 'pink', 'orange', 'blue', 'green', 'yellow'];\n  const randomColour = colours[Math.floor(Math.random() * 5)]\n  const className = randomColour + '-text';\n\n  return (props) => {\n      return (\n      <div className={className}>\n        <WrappedComponent {...props}/>\n      </div>\n    )\n  }\n}\n\nexport default Rainbow;\n","import React from 'react';\n\nconst Contact = (props) => {\n  return (\n    <div className=\"container\">\n      <h4 className=\"center\">Contact</h4>\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Perferendis eos delectus reiciendis temporibus aut, molestiae dignissimos veritatis ex qui dolore nobis nihil ea incidunt quidem, iure tempore veniam deleniti nesciunt.</p>\n    </div>\n  )\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { deletePost } from '../actions/postActions';\n\nclass Post extends Component {\n  handleClick = () => {\n    this.props.deletePost(this.props.post.id);\n    this.props.history.push('/');\n  }\n  render() {\n    const post = this.props.post ? (\n      <div className=\"post\">\n        <h4 className=\"center\">{this.props.post.title}</h4>\n        <p>{this.props.post.body}</p>\n        <div className=\"center\">\n          <button className=\"btn grey\" onClick={this.handleClick}>\n            Delete Post\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div className=\"center\">Loading post...</div>\n    );\n\n    return (\n      <div className=\"container\">\n        {post}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  let id = ownProps.match.params.post_id;\n  return {\n    post: state.posts.find(post => post.id === id)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deletePost: (id) => dispatch(deletePost(id))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\n","export const deletePost = (id) => {\n  return {\n    type: 'DELETE_POST',\n    id\n  }\n}\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport Post from './components/Post';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/contact' component={Contact} />\n            <Route path=\"/:post_id\" component={Post}></Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  posts: [\n    {id: '1', title: 'Squirtle Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},\n    {id: '2', title: 'Charmander Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},\n    {id: '3', title: 'a Helix Fossil was Found', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'}\n  ]\n}\n\nconst rootReducer = (state = initState, action) => {\n  if (action.type === 'DELETE_POST') {\n    let newPosts = state.posts.filter(post => {\n      return action.id !== post.id\n    });\n    return {\n      ...state,\n      posts: newPosts\n    }\n  }\n  return state;\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}